const https = require("follow-redirects").https;

const utils = require("./utils");

let lastRequestTime = null;
let fetchInterval = null;

function getCoordinates(dep, version, confType) {
  if (!version) return false;
  const tag = `${dep}@${version.match(/(\d+\.)?(\d+\.)?(\*|\d+)/)[0]}`;
  switch (confType) {
    case "javascript":
      return `pkg:npm/${tag}`;
    case "rust":
      return `pkg:cargo/${tag}`;
    case "python:requirements":
    case "python:pipfile":
    case "python:pyproject":
      return `pkg:pypi/${tag}`;
    default:
      return false;
  }
}

function filterPackagesToCheck(depList, confType) {
  const filteredList = [];
  for (let dep of depList) {
    const info = global.store.get(confType, dep);
    if (!("vulnerabilities" in info)) {
      const coordinate = getCoordinates(dep, info.current_version, confType);
      if (coordinate) filteredList.push(coordinate);
    }
  }
  return filteredList;
}

function populateVulnerability(data, confType) {
  data = [
    {
      coordinates: "pkg:npm/nodemon@1.14.0",
      description: "Simple monitor script for use during development of a node.js app.",
      reference: "https://ossindex.sonatype.org/component/pkg:npm/nodemon@1.14.0",
      vulnerabilities: [],
    },
    {
      coordinates: "pkg:npm/express@4.0.0",
      description: "Fast, unopinionated, minimalist web framework",
      reference: "https://ossindex.sonatype.org/component/pkg:npm/express@4.0.0",
      vulnerabilities: [
        {
          id: "019912ec-505b-4996-aa53-d497d723a20f",
          title: "CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')",
          description:
            "The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.",
          cvssScore: 5.3,
          cvssVector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          cwe: "CWE-400",
          reference: "https://ossindex.sonatype.org/vuln/019912ec-505b-4996-aa53-d497d723a20f",
        },
        {
          id: "795e296e-11cd-4d14-af27-e2adf6205771",
          title:
            "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
          description:
            "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
          cvssScore: 5.8,
          cvssVector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N",
          cwe: "CWE-22",
          reference: "https://ossindex.sonatype.org/vuln/795e296e-11cd-4d14-af27-e2adf6205771",
        },
        {
          id: "05ee21a3-9568-4f33-892d-371173be6462",
          title: "Root path disclosure vulnerability",
          description:
            "Fixed root path disclosure vulnerability in express.static, res.sendfile, and res.sendFile",
          cvssScore: 0,
          reference: "https://ossindex.sonatype.org/vuln/05ee21a3-9568-4f33-892d-371173be6462",
        },
        {
          id: "d98dc30c-4b06-450b-8964-37043c4071b8",
          title: "CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')",
          description:
            "The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.",
          cvssScore: 5.3,
          cvssVector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
          cwe: "CWE-400",
          reference: "https://ossindex.sonatype.org/vuln/d98dc30c-4b06-450b-8964-37043c4071b8",
        },
        {
          id: "9480193f-8055-4bad-b43b-8730ce1a43ce",
          title: "Open redirect vulnerability",
          description: "There is an open redirect vulnerability in express.static",
          cvssScore: 0,
          reference: "https://ossindex.sonatype.org/vuln/9480193f-8055-4bad-b43b-8730ce1a43ce",
        },
        {
          id: "76061073-9122-49eb-b43a-271de1e7ef9f",
          title:
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          description:
            "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
          cvssScore: 5.4,
          cvssVector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
          cwe: "CWE-79",
          reference: "https://ossindex.sonatype.org/vuln/76061073-9122-49eb-b43a-271de1e7ef9f",
        },
        {
          id: "eabc7c7e-3a79-4efa-8cb9-fbc552a5d10c",
          title:
            "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
          description:
            "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
          cvssScore: 5.4,
          cvssVector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
          cwe: "CWE-79",
          reference: "https://ossindex.sonatype.org/vuln/eabc7c7e-3a79-4efa-8cb9-fbc552a5d10c",
        },
        {
          id: "3294af7b-f3fb-441f-8464-2a5d8e1aadb4",
          title:
            '[CVE-2014-6393]  Improper Neutralization of Input During Web Page Generation ("Cross-site Scripting")',
          description:
            "The Express web framework before 3.11 and 4.x before 4.5 for Node.js does not provide a charset field in HTTP Content-Type headers in 400 level responses, which might allow remote attackers to conduct cross-site scripting (XSS) attacks via characters in a non-standard encoding.",
          cvssScore: 6.1,
          cvssVector: "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          cve: "CVE-2014-6393",
          reference: "https://ossindex.sonatype.org/vuln/3294af7b-f3fb-441f-8464-2a5d8e1aadb4",
        },
      ],
    },
  ];

  for (let p of data) {
    // TODO: might have issues with pacages with namespace
    const dep = p.coordinates.split("/")[1].split("@")[0];
    console.log("dep:", dep);
    global.store.set(confType, dep, { vulnerabilities: p.vulnerabilities });
  }
}

function updateVulnerabilities(depList, confType) {
  populateVulnerability({}, confType);
  return
  if (fetchInterval) clearInterval(fetchInterval);
  fetchInterval = setInterval(
    () => {
      const searchList = filterPackagesToCheck(depList, confType).splice(0, 199);
      if (searchList.length === 0) clearInterval(fetchInterval);

      const data = JSON.stringify({ coordinates: searchList });
      const options = {
        hostname: "ossindex.sonatype.org",
        port: 443,
        path: "/api/v3/component-report",
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Content-Length": data.length,
        },
      };

      let req = https
        .request(options, resp => {
          let data = "";
          resp.on("data", chunk => {
            data += chunk;
          });
          resp.on("end", () => {
            const parsed = JSON.parse(data);
            console.log("parsed:", parsed);
            populateVulnerability(parsed, confType);
          });
        })
        .on("error", err => {
          console.log("Error: " + err.message);
        });

      req.write(data);
      req.end();
    },

    lastRequestTime === null ? 0 : 3000
  );
  lastRequestTime = new Date().getTime();
}

async function showVulnerabilities(handle) {
  const filePath = await handle.nvim.commandOutput("echo expand('%')"); // there should be a better, I just don't know
  const confType = utils.determineFileKind(filePath);
  const nameRegex = utils.getNameRegex(confType);

  const line = await handle.nvim.getLine();
  console.log("line:", line);

  const vals = line.match(nameRegex);
  if (vals !== null && vals !== undefined && 1 in vals && vals[1] !== null) {
    const dep = vals[1].trim();
    const info = global.store.get(confType, dep);
    console.log("info:", info);
    if (!("vulnerabilities" in info)) {
      await handle.nvim.command('echo "No vulnerabilities found"');
      return;
    }
    const vulnerability_info = utils.createVulStats(
      info.vulnerabilities,
      `${dep}@${info.current_version}`
    );

    await handle.nvim.command("topleft new");
    await handle.nvim.command("set ft=markdown");
    await handle.nvim.buffer.insert(vulnerability_info, 0);
    [
      "nobuflisted",
      "nolist",
      "bufhidden=wipe",
      "setlocal buftype=nofile",
      "setlocal bufhidden=hide",
    ].map(async c => {
      await handle.nvim.command(c);
    });
  }
}

module.exports = { updateVulnerabilities, showVulnerabilities };
